{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/genomeassembler/master/nextflow_schema.json",
    "title": "nf-core/genomeassembler pipeline parameters",
    "description": "Assemble genomes from long ONT or pacbio HiFi reads",
    "type": "object",
    "$defs": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "required": ["input", "outdir"],
            "properties": {
                "input": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "schema": "assets/schema_input.json",
                    "mimetype": "text/csv",
                    "pattern": "^\\S+\\.csv$",
                    "description": "Path to comma-separated file containing information about the samples in the experiment.",
                    "help_text": "You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. See [usage docs](https://nf-co.re/genomeassembler/usage#samplesheet-input).",
                    "fa_icon": "fas fa-file-csv"
                },
                "outdir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
                    "fa_icon": "fas fa-folder-open"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (`~/.nextflow/config`) then you don't need to specify this on the command line for every run.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
                }
            }
        },
        "institutional_config_options": {
            "title": "Institutional config options",
            "type": "object",
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
            "properties": {
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_name": {
                    "type": "string",
                    "description": "Institutional config name.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "version": {
                    "type": "boolean",
                    "description": "Display version and exit.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "publish_dir_mode": {
                    "type": "string",
                    "description": "Method used to save pipeline results to output directory.",
                    "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
                    "fa_icon": "fas fa-copy",
                    "enum": ["symlink", "rellink", "link", "copy", "copyNoFollow", "move"],
                    "hidden": true,
                    "default": "copy"
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully.",
                    "hidden": true
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true
                },
                "hook_url": {
                    "type": "string",
                    "description": "Incoming hook URL for messaging service",
                    "fa_icon": "fas fa-people-group",
                    "help_text": "Incoming hook URL for messaging service. Currently, MS Teams and Slack are supported.",
                    "hidden": true
                },
                "validate_params": {
                    "type": "boolean",
                    "description": "Boolean whether to validate parameters against the schema at runtime",
                    "default": true,
                    "fa_icon": "fas fa-check-square",
                    "hidden": true
                },
                "pipelines_testdata_base_path": {
                    "type": "string",
                    "fa_icon": "far fa-check-circle",
                    "description": "Base URL or local path to location of pipeline test dataset files",
                    "default": "https://raw.githubusercontent.com/nf-core/test-datasets/",
                    "hidden": true
                }
            }
        },
        "general_parameters": {
            "title": "General parameters",
            "type": "object",
            "description": "Options controlling pipeline behavior",
            "default": "",
            "properties": {
                "use_ref": {
                    "type": "boolean",
                    "description": "use reference genome",
                    "default": true
                },
                "skip_assembly": {
                    "type": "boolean",
                    "description": "skip assembly steps",
                    "help_text": "Skip assembly and perform only qc. Requires 'assembly' column in the samplesheet"
                },
                "skip_alignments": {
                    "type": "boolean",
                    "description": "skip alignments during qc"
                }
            },
            "fa_icon": "fas fa-bacon"
        },
        "ont_options": {
            "title": "ONT options",
            "type": "object",
            "description": "Options for ONT reads",
            "default": "",
            "properties": {
                "ont": {
                    "type": "boolean",
                    "description": "ONT reads available?"
                },
                "collect": {
                    "type": "boolean",
                    "description": "collect ONT reads into a single file"
                },
                "porechop": {
                    "type": "boolean",
                    "description": "run porechop on ONT reads"
                },
                "read_length": {
                    "type": "integer",
                    "description": "read length for genomescope (ONT only)",
                    "minimum": 1
                },
                "jellyfish": {
                    "type": "boolean",
                    "description": "run jellyfish on ONT reads to compute k-mer distribution and estimate genome size",
                    "default": true
                },
                "dump": {
                    "type": "boolean",
                    "description": "dump jellyfish output"
                },
                "kmer_length": {
                    "type": "integer",
                    "description": "kmer length to be used for jellyfish",
                    "default": 21,
                    "minimum": 1
                }
            }
        },
        "hifi_options": {
            "title": "HiFi options",
            "type": "object",
            "description": "Options for HiFi reads",
            "default": "",
            "properties": {
                "hifi": {
                    "type": "boolean",
                    "description": "HiFi reads available?"
                },
                "lima": {
                    "type": "boolean",
                    "description": "run lima on HiFi reads?"
                },
                "pacbio_primers": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "pattern": "^\\S+\\.fn?a(sta)?$",
                    "description": "file containing pacbio primers for trimming with lima"
                }
            }
        },
        "assembly_options": {
            "title": "Assembly options",
            "type": "object",
            "description": "Options controlling assembly",
            "default": "",
            "properties": {
                "assembler": {
                    "type": "string",
                    "description": "Assembler to use. Valid choices are: `'hifiasm'`, `'flye'`, or `'flye_on_hifiasm'`. `flye_on_hifiasm` will scaffold flye assembly (ont) on hifiasm (hifi) assembly using ragtag",
                    "enum": ["flye", "hifiasm", "flye_on_hifiasm"],
                    "default": "flye"
                },
                "genome_size": {
                    "type": "integer",
                    "description": "expected genome size, optional",
                    "minimum": 1
                },
                "flye_mode": {
                    "type": "string",
                    "description": "flye mode",
                    "default": "--nano-hq",
                    "enum": ["--pacbio-raw", "--pacbio-corr", "--pacbio-hifi", "--nano-raw", "--nano-corr", "--nano-hq"]
                },
                "flye_args": {
                    "type": "string",
                    "description": "additional args for flye"
                },
                "hifiasm_ont": {
                    "type": "boolean",
                    "description": "Use hifi and ONT reads with `hifiasm --ul`"
                },
                "hifiasm_args": {
                    "type": "string",
                    "description": "Extra arguments passed to `hifiasm`"
                }
            }
        },
        "short_read_options": {
            "title": "Short read options",
            "type": "object",
            "description": "Options for short reads",
            "default": "",
            "properties": {
                "short_reads": {
                    "type": "boolean",
                    "description": "Short reads available?"
                },
                "trim_short_reads": {
                    "type": "boolean",
                    "description": "trim short reads with trimgalore",
                    "default": true
                },
                "meryl_k": {
                    "type": "integer",
                    "description": "kmer length for meryl / merqury",
                    "default": 21,
                    "minimum": 1
                }
            }
        },
        "polishing_options": {
            "title": "Polishing options",
            "type": "object",
            "description": "Polishing options",
            "default": "",
            "properties": {
                "polish_pilon": {
                    "type": "boolean",
                    "description": "Polish assembly with pilon? Requires short reads"
                },
                "polish_medaka": {
                    "type": "boolean",
                    "description": "Polish assembly with medaka (ONT only)"
                },
                "medaka_model": {
                    "type": "string",
                    "description": "model to use with medaka"
                }
            }
        },
        "scaffolding_options": {
            "title": "Scaffolding options",
            "type": "object",
            "description": "Scaffolding options",
            "default": "",
            "properties": {
                "scaffold_longstitch": {
                    "type": "boolean",
                    "description": "Scaffold with longstitch?"
                },
                "scaffold_links": {
                    "type": "boolean",
                    "description": "Scaffolding with links?"
                },
                "scaffold_ragtag": {
                    "type": "boolean",
                    "description": "Scaffold with ragtag (requires reference)?"
                }
            }
        },
        "qc_options": {
            "title": "QC options",
            "type": "object",
            "description": "Options for QC tools",
            "default": "",
            "properties": {
                "merqury": {
                    "type": "boolean",
                    "default": true,
                    "description": "Run merqury"
                },
                "qc_reads": {
                    "type": "string",
                    "description": "Long reads that should be used for QC when both ONT and HiFi reads are provided. Options are `'ONT'` or `'HIFI'`",
                    "enum": ["ONT", "HIFI"],
                    "default": "ONT"
                },
                "busco": {
                    "type": "boolean",
                    "description": "Run BUSCO?",
                    "default": true
                },
                "busco_db": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "Path to busco db (optional)"
                },
                "busco_lineage": {
                    "type": "string",
                    "description": "Busco lineage to use",
                    "default": "brassicales_odb10"
                },
                "quast": {
                    "type": "boolean",
                    "description": "Run quast",
                    "default": true
                }
            }
        },
        "annotations_options": {
            "title": "Annotations options",
            "type": "object",
            "description": "Options controlling annotation liftover",
            "default": "",
            "properties": {
                "lift_annotations": {
                    "type": "boolean",
                    "description": "Lift-over annotations (requires reference)?",
                    "default": true
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/$defs/input_output_options"
        },
        {
            "$ref": "#/$defs/institutional_config_options"
        },
        {
            "$ref": "#/$defs/generic_options"
        },
        {
            "$ref": "#/$defs/general_parameters"
        },
        {
            "$ref": "#/$defs/ont_options"
        },
        {
            "$ref": "#/$defs/hifi_options"
        },
        {
            "$ref": "#/$defs/assembly_options"
        },
        {
            "$ref": "#/$defs/short_read_options"
        },
        {
            "$ref": "#/$defs/polishing_options"
        },
        {
            "$ref": "#/$defs/scaffolding_options"
        },
        {
            "$ref": "#/$defs/qc_options"
        },
        {
            "$ref": "#/$defs/annotations_options"
        }
    ]
}
