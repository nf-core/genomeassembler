/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/genomeassembler Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                      = null

    // Boilerplate options
    outdir                       = null
    publish_dir_mode             = 'copy'
    email                        = null
    email_on_fail                = null
    plaintext_email              = false
    monochrome_logs              = false
    hook_url                     = null
    help                         = false
    help_full                    = false
    show_hidden                  = false
    version                      = false
    pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/'

    // Config options
    config_profile_name        = null
    config_profile_description = null

    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null

    // Schema validation default options
    validate_params            = true

    // Pipeline params
    input                      = '' // input file
    outdir                     = null // outdir
    use_ref                    = true // use a reference genome (requires fasta + gff)
    skip_alignments            = false // Intended for QC-oriented (re)-runs, alignments (to ref) are provided
    skip_assembly              = false // Intended for QC-oriented (re)-runs, assemblies are provided
    // -- ONT
    ont                        = false // ont reads available?
    collect_reads              = false // collect ONT reads into a single file
    porechop                   = false // run porechop on ONT
    read_length                = null // avg read length, can be estimated from reads
    // -- Jellyfish (ONT reads only) --
    jellyfish                  = true // run jellyfish
    dump                       = false // dump output
    kmer_length                = 21 // kmer length
    // -- HiFi --
    hifi                       = false // HiFi reads available?
    lima                       = false // run lima on HiFi reads?
    pacbio_primers             = null // if lima, then this needs to be a path to a list of primers
    // -- ASSEMBLY
    assembler                  = "flye" // assembler to use
    // -- Assembly: Flye --
    genome_size                = null // genomesize, optional, can be estimated from ONT reads
    flye_mode                  = '--nano-hq' // flye mode
    flye_args                  = "" // extra flye args
    // -- Assembly: hifiasm  --
    hifiasm_ont                = false // combine hifi and ONT with hifiasm --ul?
    hifiasm_args               = "" // extra hifiasm args
    // -- Short read --
    short_reads                = false // short reads available?
    trim_short_reads           = true // trim short reads?
    // -- POLISHING
    // -- Polish: medaka
    polish_medaka              = false // run medaka
    medaka_model               = "" // model for medaka, if empty medaka will guess
    // -- Polish: pilon
    polish_pilon               = false // run pilon
    // -- QC --
    // -- QC : Meryl, automatically enabled with short-reads
    meryl_k                    = 21 // k for meryl
    merqury                    = true
    // -- QC : Busco
    busco                      = false // run busco
    busco_db                   = '' // path to busco db
    busco_lineage              = "brassicales_odb10" // busco lineage
    // -- QC: QUAST
    quast                      = false // run quast
    qc_reads                   = "ONT" // if both ONT and HiFi reads are available, which should be used for QC alignments
    // -- SCAFFOLDING
    scaffold_links             = false // Scaffold with LINKS
    scaffold_longstitch        = false // Scaffold with Longstitch
    scaffold_ragtag            = false // Scaffold with ragtag
    // -- ANNOTATIONS
    lift_annotations           = true // lift annotations from reference (if reference is provided)
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
        dumpHashes              = true

    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
        process {
            resourceLimits = [
                memory: 8.GB,
                cpus  : 4,
                time  : 1.h
            ]
        }
    }

    gpu {
        docker.runOptions       = '-u $(id -u):$(id -g) --gpus all'
        apptainer.runOptions    = '--nv'
        singularity.runOptions  = '--nv'
    }

    test                            { includeConfig 'conf/test.config'                              }
    test_full                       { includeConfig 'conf/test_full.config'                         }
    hifi_flye                       { includeConfig 'configs/hifi_flye.config'                      } // Hifi-reads with flye
    hifi_hifiasm                    { includeConfig 'configs/hifi_hifiasm.config'                   } // hifi-reads with hifiasm
    ont_flye                        { includeConfig 'configs/ont_flye.config'                       } // ont-reads with flye
    ont_hifiasm                     { includeConfig 'configs/ont_hifiasm.config'                    } // ont-reads with hifiasm
    hifiont_hifiasm                 { includeConfig 'configs/hifi_ont_hifiasm_ul.config'            } // ont and hifi reads with hifiasm --ul
    hifiont_flye_on_hifiasm         { includeConfig 'configs/hifi_ont_flye_on_hifiasm.config'       } // ont and hifi reads. ONT via flye, Hifi via hifiasm, scaffold flye on hifiasm
    hifiont_hifiasm_on_hifiasm      { includeConfig 'configs/hifi_ont_hifiasm_on_hifiasm.config'    } // ont and hifi reads. ONT via hifiasm, Hifi via hifiasm, scaffold ONT on HiFi
}

// Load nf-core custom profiles from different institutions

// If params.custom_config_base is set AND either the NXF_OFFLINE environment variable is not set or params.custom_config_base is a local path, the nfcore_custom.config file from the specified base path is included.
// Load nf-core/genomeassembler custom profiles from different institutions.
includeConfig params.custom_config_base && (!System.getenv('NXF_OFFLINE') || !params.custom_config_base.startsWith('http')) ? "${params.custom_config_base}/nfcore_custom.config" : "/dev/null"


// Load nf-core/genomeassembler custom profiles from different institutions.
includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/pipeline/genomeassembler.config" : "/dev/null"

// Set default registry for Apptainer, Docker, Podman, Charliecloud and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Charliecloud / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry    = 'quay.io'
docker.registry       = 'quay.io'
podman.registry       = 'quay.io'
singularity.registry  = 'quay.io'
charliecloud.registry = 'quay.io'



// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Set bash options
process.shell = [
    "bash",
    "-C",         // No clobber - prevent output redirection from overwriting files.
    "-e",         // Exit if a tool returns a non-zero status/exit code
    "-u",         // Treat unset variables and parameters as an error
    "-o",         // Returns the status of the last command to exit..
    "pipefail"    //   ..with a non-zero status or zero if all successfully execute
]

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/genomeassembler'
    author          = """Niklas Schandry"""
    contributors    = [
        [
            name: 'Niklas Schandry',
            affiliation: 'LMU Munich, Faculty of Biology, Genetics',
            email: 'niklas@bio.lmu.de',
            github: '@nschan',
            contribution: ['author', 'maintainer'],
            orcid: '0000-0003-3099-7860'
        ]
    ]
    homePage        = 'https://github.com/nf-core/genomeassembler'
    description     = """Assemble genomes from long ONT or pacbio HiFi reads"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=24.04.2'
    version         = '1.1.0'
    doi             = '10.5281/zenodo.14986998'
}

// Nextflow plugins
plugins {
    id 'nf-schema@2.2.0' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

validation {
    defaultIgnoreParams = ["genomes"]
    help {
        enabled = true
        command = "nextflow run $manifest.name -profile <docker/singularity/.../institute> --input samplesheet.csv --outdir <OUTDIR>"
        fullParameter = "help_full"
        showHiddenParameter = "show_hidden"
        beforeText = """
-\033[2m----------------------------------------------------\033[0m-
                                        \033[0;32m,--.\033[0;30m/\033[0;32m,-.\033[0m
\033[0;34m        ___     __   __   __   ___     \033[0;32m/,-._.--~\'\033[0m
\033[0;34m  |\\ | |__  __ /  ` /  \\ |__) |__         \033[0;33m}  {\033[0m
\033[0;34m  | \\| |       \\__, \\__/ |  \\ |___     \033[0;32m\\`-._,-`-,\033[0m
                                        \033[0;32m`._,._,\'\033[0m
\033[0;35m  ${manifest.name} ${manifest.version}\033[0m
-\033[2m----------------------------------------------------\033[0m-
"""
        afterText = """${manifest.doi ? "* The pipeline\n" : ""}${manifest.doi.tokenize(",").collect { "  https://doi.org/${it.trim().replace('https://doi.org/','')}"}.join("\n")}${manifest.doi ? "\n" : ""}
* The nf-core framework
    https://doi.org/10.1038/s41587-020-0439-x

* Software dependencies
    https://github.com/${manifest.name}/blob/master/CITATIONS.md
"""
    }
    summary {
        beforeText = validation.help.beforeText
        afterText = validation.help.afterText
    }
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'
